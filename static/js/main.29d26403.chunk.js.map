{"version":3,"sources":["store.js","components/ToDo.js","components/AddBtn.js","components/FormArea.js","routes/Home.js","routes/Detail.js","components/App.js","index.js"],"names":["storageKey","toDos","createSlice","name","initialState","ToDoList","JSON","parse","localStorage","getItem","drawState","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","undefined","usePortal","reducers","add","action","stateItem","text","payload","id","Date","now","unshift","tmpObj","push","setItem","stringify","arrObj","remove","state","filter","obj","toDo","setDraw","actions","configureStore","reducer","connect","dispatch","ownProps","onDeleteBtn","to","onClick","AddBtn","eventProps","className","addToDo","closeFunc","useState","setText","onSubmit","e","preventDefault","alert","onChange","target","value","type","placeholder","setDrawState","options","handleClose","icon","onClose","title","Classes","DRAWER_BODY","DIALOG_BODY","map","key","match","params","find","parseInt","console","log","App","path","exact","component","Home","Detail","ReactDom","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.29d26403.chunk.js","sourcesContent":["import { Position } from \"@blueprintjs/core\";\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst storageKey = \"Keepbang.ToDo.Storage\";\r\n\r\nconst initState = () => {\r\n    return JSON.parse(localStorage.getItem(storageKey))?JSON.parse(localStorage.getItem(storageKey)):[];\r\n}\r\n\r\nconst toDos = createSlice({\r\n    name: 'toDoReducer',\r\n    initialState: {\r\n        ToDoList: initState(),\r\n        drawState: {\r\n            autoFocus: true,\r\n            canEscapeKeyClose: true,\r\n            canOutsideClickClose: true,\r\n            enforceFocus: true,\r\n            hasBackdrop: true,\r\n            isOpen: false,\r\n            position: Position.BOTTOM,\r\n            size: undefined,\r\n            usePortal: true,\r\n        }\r\n    },\r\n    reducers: {\r\n        add: ({ToDoList}, action) => {\r\n            let stateItem = { text: action.payload, id: Date.now()};\r\n            ToDoList.unshift(stateItem);\r\n            let tmpObj = localStorage.getItem(storageKey);\r\n            if(tmpObj === null){\r\n                tmpObj = [];\r\n                tmpObj.push(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(tmpObj));\r\n            }else{\r\n                let arrObj = JSON.parse(tmpObj);\r\n                arrObj.unshift(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n            }\r\n        },\r\n        remove: (state, action) => {\r\n            let arrObj = JSON.parse(localStorage.getItem(storageKey));\r\n            arrObj = arrObj.filter(obj => obj.id !== action.payload);\r\n            localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n\r\n            return {...state,ToDoList : state.ToDoList.filter(toDo => toDo.id !== action.payload)};\r\n        },\r\n        setDraw: (state,action) => {\r\n            return {...state,drawState: {...state.drawState,...action.payload}}\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    add,\r\n    remove,\r\n    setDraw\r\n} = toDos.actions\r\n\r\nexport default configureStore({reducer: toDos.reducer});","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { remove } from '../store';\r\n\r\nfunction ToDo({text,id, onDeleteBtn}) {\r\n    return(\r\n        <li id={id}>\r\n            <Link to={`/${id}`}>\r\n                {text} \r\n            </Link>\r\n            <button onClick={onDeleteBtn}>DEL</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch,ownProps){\r\n    return {\r\n        onDeleteBtn: () => dispatch(remove(ownProps.id))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(ToDo);","import React from 'react'\r\nimport '../css/AddBtn.scss'\r\n\r\nconst AddBtn = ({eventProps}) => {\r\n    return <>\r\n        <div className=\"add_btn\" onClick={eventProps}>\r\n            +\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default AddBtn;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { add } from '../store';\r\n\r\nconst FormArea = ({addToDo, closeFunc}) => {\r\n\r\n    const [text,setText] = useState(\"\");\r\n    \r\n    function onChange(e){\r\n        setText(e.target.value);\r\n    }\r\n\r\n    function onSubmit(e){\r\n        e.preventDefault();\r\n        if(text === \"\"){\r\n            alert(\"아무것도 입력하지 않았습니다.\");\r\n        }else{\r\n            addToDo(text);\r\n            setText(\"\");\r\n            closeFunc();\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <form onSubmit={onSubmit}>\r\n            <input className=\"input__box\" onChange={onChange} type=\"text\" placeholder=\"Write ToDo...\"/>\r\n            <button className=\"input__btn\">ADD</button>\r\n        </form>\r\n    </>\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addToDo: text => dispatch(add(text))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(FormArea);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ToDo from '../components/ToDo';\r\nimport '../css/Home.scss';\r\nimport { setDraw } from '../store';\r\n\r\nimport AddBtn from '../components/AddBtn';\r\nimport FormArea from '../components/FormArea';\r\nimport { Classes, Drawer } from '@blueprintjs/core';\r\n\r\nfunction Home({toDos, drawState, addToDo, setDrawState}) {\r\n\r\n    const handleClose = () => {setDrawState({isOpen:false})};\r\n    const handleOpen = () => {setDrawState({isOpen:true})};\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"home_title\">ToDo</h2>\r\n            <Drawer\r\n                icon=\"edit\"\r\n                onClose={handleClose}\r\n                title=\"Add ToDo\"\r\n                {...drawState}\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <div className={Classes.DIALOG_BODY}>\r\n                        <FormArea closeFunc={handleClose}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </Drawer>\r\n            <ul>\r\n                {\r\n                    toDos.map(toDo => <ToDo key={toDo.id} {...toDo}/>)\r\n                }\r\n            </ul>\r\n            <AddBtn eventProps={handleOpen}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        toDos: state.ToDoList,\r\n        drawState: state.drawState\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setDrawState: options => dispatch(setDraw(options))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Detail({toDo}) {\r\n    console.log(toDo);\r\n    return (\r\n            <>\r\n                <h1>\r\n                    {toDo?.text}\r\n                </h1>\r\n                <h2>\r\n                    Create at : {toDo?.id}\r\n                </h2>\r\n            </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state,ownProps){\r\n    const {match: {params:{id}}} = ownProps;\r\n    return {toDo: state.find(toDo => toDo.id === parseInt(id))};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Detail);","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nimport {HashRouter as Router, Route} from 'react-router-dom'\r\nimport Home from '../routes/Home';\r\nimport Detail from '../routes/Detail';\r\n\r\nfunction App() {\r\n  return <Router>\r\n    <Route path=\"/\" exact component={Home}></Route>\r\n    <Route path=\"/:id\" component={Detail}></Route>\r\n  </Router>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nimport './css/index.css';\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <App></App>\r\n    </Provider>\r\n    ,document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}