{"version":3,"sources":["common/dateToString.js","store.js","components/AddBtn.js","components/FormArea.js","components/Header.js","components/ToDo.js","routes/Home.js","routes/Detail.js","components/App.js","serviceWorker.js","index.js"],"names":["dateToString","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","storageKey","toDos","createSlice","name","initialState","Date","ToDoList","JSON","parse","localStorage","getItem","drawState","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","Drawer","SIZE_LARGE","usePortal","reducers","add","payload","stateItem","title","text","id","substr","getTime","checked","unshift","tmpObj","push","setItem","stringify","arrObj","update","state","updateToDo","map","toDo","remove","action","filter","obj","check","setDraw","setDate","toDoRefresh","filterData","parseInt","actions","configureStore","reducer","AddBtn","eventProps","className","onClick","icon","iconSize","Icon","intent","Intent","NONE","connect","dispatch","addToDo","closeFunc","type","useState","setText","setTitle","history","useHistory","useEffect","onSubmit","e","preventDefault","alert","alwaysRenderInput","INTENT_PRIMARY","maxLength","placeholder","value","onChange","maxLines","minLines","multiline","setChangeDate","d","formatDate","toLocaleString","year","month","day","parseDate","str","replace","popoverProps","BOTTOM_LEFT","disabled","minDate","ownProps","onDeleteBtn","onChecked","titleClass","classNames","target","large","to","fill","setDrawState","options","onToDoRefresh","handleClose","handleOpen","onClose","Classes","DRAWER_BODY","DIALOG_BODY","length","key","match","params","find","style","padding","App","path","exact","component","Home","Detail","Boolean","window","location","hostname","ReactDom","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa3441c7.chunk.js","sourcesContent":["export const dateToString = (date) => {\r\n        let formatDate = date.getFullYear() + \"-\" + \r\n                        String(date.getMonth() + 1).padStart(2,'0') + \"-\" + \r\n                        String(date.getDate()).padStart(2,'0') + \" \" +\r\n                        String(date.getHours()).padStart(2,'0') + \":\" +\r\n                        String(date.getMinutes()).padStart(2,'0') + \":\" +\r\n                        String(date.getSeconds()).padStart(2,'0');\r\n\r\n        return formatDate;\r\n}","import { Drawer, Position } from \"@blueprintjs/core\";\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\nimport {dateToString} from './common/dateToString';\r\n\r\nconst storageKey = \"Keepbang.ToDo.Storage\";\r\n\r\nconst initState = () => {\r\n    return JSON.parse(localStorage.getItem(storageKey))||[];\r\n}\r\n\r\nconst toDos = createSlice({\r\n    name: 'toDoReducer',\r\n    initialState: {\r\n        date : dateToString(new Date()),\r\n        ToDoList: initState(),\r\n        drawState: {\r\n            autoFocus: true,\r\n            canEscapeKeyClose: true,\r\n            canOutsideClickClose: true,\r\n            enforceFocus: true,\r\n            hasBackdrop: true,\r\n            isOpen: false,\r\n            position: Position.BOTTOM,\r\n            size: Drawer.SIZE_LARGE,\r\n            usePortal: true,\r\n        }\r\n    },\r\n    reducers: {\r\n        add: ({date,ToDoList}, {payload}) => {\r\n            let stateItem = {title: payload.title, text: payload.text, id: new Date(date.substr(0,10)+'T'+dateToString(new Date()).substr(11)).getTime(), checked: false};\r\n            ToDoList.unshift(stateItem);\r\n            let tmpObj = localStorage.getItem(storageKey);\r\n            if(tmpObj === null){\r\n                tmpObj = [];\r\n                tmpObj.push(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(tmpObj));\r\n            }else{\r\n                let arrObj = JSON.parse(tmpObj);\r\n                arrObj.unshift(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n            }\r\n        },\r\n        update: (state, {payload}) => {\r\n            let stateItem = {title: payload.title, text: payload.text, id: payload.id, checked: false};\r\n            let updateToDo = state.ToDoList.map(toDo => (toDo.id === stateItem.id?stateItem:toDo));\r\n            localStorage.setItem(storageKey,JSON.stringify(updateToDo));\r\n            return {...state,ToDoList : updateToDo}\r\n        },\r\n        remove: (state, action) => {\r\n            let arrObj = JSON.parse(localStorage.getItem(storageKey));\r\n            arrObj = arrObj.filter(obj => obj.id !== action.payload);\r\n            localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n\r\n            return {...state,ToDoList : state.ToDoList.filter(toDo => toDo.id !== action.payload)};\r\n        },\r\n        check: (state, {payload}) => {\r\n            let updateToDo = state.ToDoList.map(toDo => (toDo.id === payload.id?{...toDo,checked:payload.checked}:toDo));\r\n            localStorage.setItem(storageKey,JSON.stringify(updateToDo));\r\n            return {...state,ToDoList : updateToDo}\r\n        },\r\n        setDraw: (state,action) => {\r\n            return {...state,drawState: {...state.drawState,...action.payload}}\r\n        },\r\n        setDate: (state,action) => {\r\n            return {...state, date: action.payload}\r\n        },\r\n        toDoRefresh: (state, action) => {\r\n            let filterData = state.ToDoList.filter(toDo => new Date(state.date.substr(0,10) + \"T00:00:00\") < new Date(parseInt(toDo.id)));\r\n            localStorage.setItem(storageKey, JSON.stringify(filterData));\r\n            return {...state, ToDoList: filterData}\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    add,\r\n    update,\r\n    remove,\r\n    check,\r\n    setDraw,\r\n    setDate,\r\n    toDoRefresh\r\n} = toDos.actions\r\n\r\nexport default configureStore({reducer: toDos.reducer});","import { Icon, Intent } from '@blueprintjs/core'\r\nimport React from 'react'\r\nimport '../css/AddBtn.scss'\r\n\r\nconst AddBtn = ({eventProps}) => {\r\n    return <>\r\n        <div className=\"add_btn\" onClick={eventProps}>\r\n            <Icon icon=\"add-to-artifact\" iconSize={Icon.SIZE_LARGE} intent={Intent.NONE}/>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default AddBtn;","import { Button, Divider, EditableText, H3 } from '@blueprintjs/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { add, update } from '../store';\r\nimport '../css/FormArea.scss';\r\nimport { INTENT_PRIMARY } from '@blueprintjs/core/lib/esm/common/classes';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst FormArea = ({addToDo,updateToDo, closeFunc, toDo, type}) => {\r\n\r\n    const [text,setText] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(typeof toDo !== \"undefined\" && type === \"update\"){\r\n            setTitle(toDo.title);\r\n            setText(toDo.text);\r\n        }\r\n        \r\n    }, [type,toDo])\r\n\r\n    function onChangeText(value){\r\n        setText(value);\r\n    }\r\n\r\n    function onChangeTitle(value){\r\n        setTitle(value);\r\n    }\r\n\r\n    function onSubmit(e){\r\n        e.preventDefault();\r\n        if(title === \"\"){\r\n            alert(\"Title을 입력해주세요\");\r\n            return;\r\n        }\r\n        if(type === \"update\" && typeof closeFunc !== \"function\"){\r\n            updateToDo({title, text,id: toDo.id});\r\n            history.push('/');\r\n        }else{\r\n            addToDo({title,text});\r\n            closeFunc();\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <form onSubmit={onSubmit} className=\"form_area\">\r\n            <H3>\r\n                <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLength={100}\r\n                    placeholder=\"Write title...\"\r\n                    value={title}\r\n                    onChange={onChangeTitle}\r\n                />\r\n            </H3>\r\n            <Divider />\r\n            <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLines={7}\r\n                    minLines={5}\r\n                    multiline={true}\r\n                    placeholder=\"Write ToDo...\"\r\n                    onChange={onChangeText}\r\n                    value={text}\r\n                />\r\n            <Divider />\r\n            <div className=\"add_btn_area\">\r\n                <Button\r\n                    className=\"add__btn\"\r\n                    type=\"submit\"\r\n                    icon={typeof closeFunc === \"function\"?\"add\":\"changes\"}\r\n                    intent={typeof closeFunc === \"function\"?\"success\":\"primary\"}\r\n                    text={typeof closeFunc === \"function\"?\"ADD\":\"UPDATE\"}\r\n                />\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addToDo: (obj) => dispatch(add(obj)),\r\n        updateToDo: (obj) => dispatch(update(obj))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(FormArea);","import { Position } from '@blueprintjs/core';\r\nimport { DateInput } from '@blueprintjs/datetime';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {dateToString} from '../common/dateToString';\r\n\r\nimport '../css/Header.scss';\r\nimport { setDate } from '../store';\r\n\r\n\r\nconst Header = ({date, id,setChangeDate}) => {\r\n\r\n    useEffect(() => {\r\n        if(typeof id !== \"undefined\"){\r\n            setChangeDate(dateToString(new Date(parseInt(id))));\r\n        }\r\n    }, [setChangeDate,id])\r\n\r\n    const handleDateChange = (e) => {\r\n        setChangeDate(dateToString(e));\r\n    }\r\n\r\n\r\n    return <>\r\n        <h2 className=\"home_title\">\r\n            <DateInput\r\n                className=\"home__date\"\r\n                formatDate={date => date.toLocaleString(\"ko-KR\",{year: \"numeric\",month:\"2-digit\",day:\"2-digit\"})}\r\n                onChange={handleDateChange}\r\n                parseDate={str => new Date(str)}\r\n                placeholder={\"YYYY-MM-DD\"}\r\n                value={new Date(date.replace(' ','T'))}\r\n                popoverProps={{ position: Position.BOTTOM_LEFT }}\r\n                disabled={id?true:false}\r\n                minDate={new Date()}\r\n                />\r\n        </h2>\r\n    </>\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        date: state.date\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setChangeDate: d => dispatch(setDate(d))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Header);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from \"classnames\";\r\n\r\nimport { remove,check } from '../store';\r\n\r\nimport '../css/ToDo.scss';\r\nimport { Button, Checkbox } from '@blueprintjs/core';\r\n\r\nfunction ToDo({id,title,checked, onDeleteBtn, onChecked}) {\r\n\r\n    const onChangeHandler = (e) => {\r\n        onChecked({id,checked:e.target.checked})\r\n    }\r\n\r\n    const titleClass = classNames(\r\n        'todo___text',\r\n        (checked?'disabled':'enabled')\r\n    )\r\n\r\n    const setDate = (id) => {\r\n        let date = new Date(parseInt(id));\r\n        let formatDate = date.getFullYear() + \"-\" + \r\n                        String(date.getMonth() + 1).padStart(2,'0') + \"-\" + \r\n                        String(date.getDate()).padStart(2,'0') + \" \" +\r\n                        String(date.getHours()).padStart(2,'0') + \":\" +\r\n                        String(date.getMinutes()).padStart(2,'0') + \":\" +\r\n                        String(date.getSeconds()).padStart(2,'0');\r\n\r\n        return formatDate;\r\n    }\r\n    \r\n    return(\r\n        <li id={id} className=\"todo__li\">\r\n            <Checkbox className=\"todo___check\" checked={(typeof checked === \"undefined\"?false:checked)} onChange={onChangeHandler} large={true}/>\r\n                <Link className={titleClass} to={checked?`/#`:`/${id}`}>\r\n                    {title}\r\n                    <div className=\"todo___date\">{setDate(id)}</div>\r\n                </Link>\r\n            <div className=\"btn__area\">\r\n                <Button onClick={onDeleteBtn} fill={true} className=\"del___btn\" icon=\"trash\" intent=\"danger\"/>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch,ownProps){\r\n    return {\r\n        onDeleteBtn: () => dispatch(remove(ownProps.id)),\r\n        onChecked: (obj) => dispatch(check(obj))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(ToDo);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setDraw, toDoRefresh } from '../store';\r\nimport '../css/Home.scss';\r\n\r\nimport AddBtn from '../components/AddBtn';\r\nimport FormArea from '../components/FormArea';\r\nimport Header from '../components/Header';\r\nimport ToDo from '../components/ToDo';\r\n\r\nimport {dateToString} from '../common/dateToString';\r\n\r\nimport { Button, Classes, Drawer } from '@blueprintjs/core';\r\n\r\nfunction Home({toDos, drawState, setDrawState, onToDoRefresh}) {\r\n\r\n    useEffect(() => {\r\n        onToDoRefresh();\r\n    }, [onToDoRefresh])\r\n\r\n    const handleClose = () => {setDrawState({isOpen:false})};\r\n    const handleOpen = () => {setDrawState({isOpen:true})};\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Drawer\r\n                icon=\"annotation\"\r\n                onClose={handleClose}\r\n                title=\"Add ToDo\"\r\n                {...drawState}\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <div className={Classes.DIALOG_BODY}>\r\n                        <FormArea closeFunc={handleClose}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </Drawer>\r\n            {toDos.length === 0?\r\n                    <div className=\"empty_page\">\r\n                        <Button onClick={handleOpen} icon=\"plus\" intent=\"success\" text=\"Add frist To-Do\" large=\"true\"/>\r\n                    </div>:\r\n                    <ul className=\"todo_ul\">\r\n                    {\r\n                        toDos.map(\r\n                            toDo => <ToDo key={toDo.id} {...toDo}/> \r\n                        )\r\n                    }\r\n                </ul>\r\n                }\r\n            \r\n            <AddBtn eventProps={handleOpen}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n\r\n    const sendToDo = state.ToDoList.filter(toDo => state.date.substr(0,10) === dateToString(new Date(parseInt(toDo.id))).substr(0,10));\r\n\r\n    return {\r\n        toDos: sendToDo,\r\n        drawState: state.drawState\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setDrawState: options => dispatch(setDraw(options)),\r\n        onToDoRefresh: () => dispatch(toDoRefresh())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormArea from '../components/FormArea';\r\nimport Header from '../components/Header';\r\n\r\nfunction Detail({toDo}) {\r\n\r\n    return (\r\n            <>\r\n            <Header id={toDo.id}/>\r\n            <div style={{\r\n                padding:\"100px 20px 0px 20px\"\r\n            }}>\r\n                <FormArea toDo={toDo} type=\"update\"/>\r\n            </div>\r\n            </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps({ToDoList},ownProps){\r\n    const {match: {params:{id}}} = ownProps;\r\n    return {toDo: ToDoList.find(toDo => toDo.id === parseInt(id))};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Detail);","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nimport {HashRouter as Router, Route} from 'react-router-dom'\r\nimport Home from '../routes/Home';\r\nimport Detail from '../routes/Detail';\r\n\r\nfunction App() {\r\n  return <Router>\r\n    <Route path=\"/\" exact component={Home}></Route>\r\n    <Route path=\"/:id\" component={Detail}></Route>\r\n  </Router>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nimport './css/index.css';\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <App></App>\r\n    </Provider>\r\n    ,document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}