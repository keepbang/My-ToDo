{"version":3,"sources":["common/dateToString.js","store.js","components/AddBtn.js","components/FormArea.js","components/Header.js","components/ToDo.js","routes/Home.js","routes/Detail.js","components/App.js","index.js"],"names":["dataToString","date","getFullYear","String","getMonth","padStart","getDate","storageKey","toDos","createSlice","name","initialState","Date","ToDoList","JSON","parse","localStorage","getItem","drawState","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","Drawer","SIZE_LARGE","usePortal","reducers","add","payload","stateItem","title","text","id","now","checked","unshift","tmpObj","push","setItem","stringify","arrObj","update","state","updateToDo","map","toDo","remove","action","filter","obj","check","setDraw","setDate","actions","configureStore","reducer","AddBtn","eventProps","className","onClick","icon","iconSize","Icon","intent","Intent","NONE","connect","dispatch","addToDo","closeFunc","type","useState","setText","setTitle","history","useHistory","useEffect","onSubmit","e","preventDefault","alert","alwaysRenderInput","INTENT_PRIMARY","maxLength","placeholder","value","onChange","maxLines","minLines","multiline","setChangeDate","d","parseInt","formatDate","toLocaleString","year","month","day","parseDate","str","popoverProps","BOTTOM_LEFT","ownProps","onDeleteBtn","onChecked","titleClass","classNames","target","large","to","getHours","getMinutes","getSeconds","fill","setDrawState","options","handleClose","handleOpen","onClose","Classes","DRAWER_BODY","DIALOG_BODY","length","key","match","params","find","style","padding","App","path","exact","component","Home","Detail","ReactDom","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0d3b805e.chunk.js","sourcesContent":["export const dataToString = (date) => {\r\n        let formatDate = date.getFullYear() + \"-\" + \r\n                        String(date.getMonth() + 1).padStart(2,'0') + \"-\" + \r\n                        String(date.getDate()).padStart(2,'0');\r\n\r\n        return formatDate;\r\n}","import { Drawer, Position } from \"@blueprintjs/core\";\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\nimport {dataToString} from './common/dateToString';\r\n\r\nconst storageKey = \"Keepbang.ToDo.Storage\";\r\n\r\nconst initState = () => {\r\n    return JSON.parse(localStorage.getItem(storageKey))?JSON.parse(localStorage.getItem(storageKey)):[];\r\n}\r\n\r\nconst toDos = createSlice({\r\n    name: 'toDoReducer',\r\n    initialState: {\r\n        date : dataToString(new Date()),\r\n        ToDoList: initState(),\r\n        drawState: {\r\n            autoFocus: true,\r\n            canEscapeKeyClose: true,\r\n            canOutsideClickClose: true,\r\n            enforceFocus: true,\r\n            hasBackdrop: true,\r\n            isOpen: false,\r\n            position: Position.BOTTOM,\r\n            size: Drawer.SIZE_LARGE,\r\n            usePortal: true,\r\n        }\r\n    },\r\n    reducers: {\r\n        add: ({ToDoList}, {payload}) => {\r\n            let stateItem = {title: payload.title, text: payload.text, id: Date.now(), checked: false};\r\n            ToDoList.unshift(stateItem);\r\n            let tmpObj = localStorage.getItem(storageKey);\r\n            if(tmpObj === null){\r\n                tmpObj = [];\r\n                tmpObj.push(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(tmpObj));\r\n            }else{\r\n                let arrObj = JSON.parse(tmpObj);\r\n                arrObj.unshift(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n            }\r\n        },\r\n        update: (state, {payload}) => {\r\n            let stateItem = {title: payload.title, text: payload.text, id: payload.id, checked: false};\r\n            let updateToDo = state.ToDoList.map(toDo => (toDo.id === stateItem.id?stateItem:toDo));\r\n            localStorage.setItem(storageKey,JSON.stringify(updateToDo));\r\n            return {...state,ToDoList : updateToDo}\r\n        },\r\n        remove: (state, action) => {\r\n            let arrObj = JSON.parse(localStorage.getItem(storageKey));\r\n            arrObj = arrObj.filter(obj => obj.id !== action.payload);\r\n            localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n\r\n            return {...state,ToDoList : state.ToDoList.filter(toDo => toDo.id !== action.payload)};\r\n        },\r\n        check: (state, {payload}) => {\r\n            let updateToDo = state.ToDoList.map(toDo => (toDo.id === payload.id?{...toDo,checked:payload.checked}:toDo));\r\n            localStorage.setItem(storageKey,JSON.stringify(updateToDo));\r\n            return {...state,ToDoList : updateToDo}\r\n        },\r\n        setDraw: (state,action) => {\r\n            return {...state,drawState: {...state.drawState,...action.payload}}\r\n        },\r\n        setDate: ({date},action) => {\r\n            date = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    add,\r\n    update,\r\n    remove,\r\n    check,\r\n    setDraw,\r\n    setDate\r\n} = toDos.actions\r\n\r\nexport default configureStore({reducer: toDos.reducer});","import { Icon, Intent } from '@blueprintjs/core'\r\nimport React from 'react'\r\nimport '../css/AddBtn.scss'\r\n\r\nconst AddBtn = ({eventProps}) => {\r\n    return <>\r\n        <div className=\"add_btn\" onClick={eventProps}>\r\n            <Icon icon=\"add-to-artifact\" iconSize={Icon.SIZE_LARGE} intent={Intent.NONE}/>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default AddBtn;","import { Button, Divider, EditableText, H3 } from '@blueprintjs/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { add, update } from '../store';\r\nimport '../css/FormArea.scss';\r\nimport { INTENT_PRIMARY } from '@blueprintjs/core/lib/esm/common/classes';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst FormArea = ({addToDo,updateToDo, closeFunc, toDo, type}) => {\r\n\r\n    const [text,setText] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(typeof toDo !== \"undefined\" && type === \"update\"){\r\n            setTitle(toDo.title);\r\n            setText(toDo.text);\r\n        }\r\n        \r\n    }, [type,toDo])\r\n\r\n    function onChangeText(value){\r\n        setText(value);\r\n    }\r\n\r\n    function onChangeTitle(value){\r\n        setTitle(value);\r\n    }\r\n\r\n    function onSubmit(e){\r\n        e.preventDefault();\r\n        if(title === \"\"){\r\n            alert(\"Title을 입력해주세요\");\r\n            return;\r\n        }\r\n        if(type === \"update\" && typeof closeFunc !== \"function\"){\r\n            updateToDo({title, text,id: toDo.id});\r\n            history.push('/');\r\n        }else{\r\n            addToDo({title,text});\r\n            closeFunc();\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <form onSubmit={onSubmit} className=\"form_area\">\r\n            <H3>\r\n                <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLength={100}\r\n                    placeholder=\"Write title...\"\r\n                    value={title}\r\n                    onChange={onChangeTitle}\r\n                />\r\n            </H3>\r\n            <Divider />\r\n            <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLines={7}\r\n                    minLines={5}\r\n                    multiline={true}\r\n                    placeholder=\"Write ToDo...\"\r\n                    onChange={onChangeText}\r\n                    value={text}\r\n                />\r\n            <Divider />\r\n            <div className=\"add_btn_area\">\r\n                <Button\r\n                    className=\"add__btn\"\r\n                    type=\"submit\"\r\n                    icon={typeof closeFunc === \"function\"?\"add\":\"changes\"}\r\n                    intent={typeof closeFunc === \"function\"?\"success\":\"primary\"}\r\n                    text={typeof closeFunc === \"function\"?\"ADD\":\"UPDATE\"}\r\n                />\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addToDo: (obj) => dispatch(add(obj)),\r\n        updateToDo: (obj) => dispatch(update(obj))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(FormArea);","import { Position } from '@blueprintjs/core';\r\nimport { DateInput } from '@blueprintjs/datetime';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {dataToString} from '../common/dateToString';\r\n\r\nimport '../css/Header.scss';\r\nimport { setDate } from '../store';\r\n\r\n\r\nconst Header = ({date, id,setChangeDate}) => {\r\n\r\n    useEffect(() => {\r\n        if(typeof id !== \"undefined\"){\r\n            setChangeDate(dataToString(new Date(parseInt(id))));\r\n        }\r\n    }, [setChangeDate,id])\r\n\r\n    const handleDateChange = (e) => {\r\n        setChangeDate(dataToString(e));\r\n    }\r\n\r\n\r\n    return <>\r\n        <h2 className=\"home_title\">\r\n            <DateInput\r\n                className=\"home__date\"\r\n                formatDate={date => date.toLocaleString(\"ko-KR\",{year: \"numeric\",month:\"2-digit\",day:\"2-digit\"})}\r\n                onChange={handleDateChange}\r\n                parseDate={str => new Date(str)}\r\n                placeholder={\"YYYY-MM-DD\"}\r\n                value={new Date(date)}\r\n                popoverProps={{ position: Position.BOTTOM_LEFT }}\r\n                />\r\n        </h2>\r\n    </>\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        date: state.date\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setChangeDate: d => dispatch(setDate(d))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Header);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from \"classnames\";\r\n\r\nimport { remove,check } from '../store';\r\n\r\nimport '../css/ToDo.scss';\r\nimport { Button, Checkbox } from '@blueprintjs/core';\r\n\r\nfunction ToDo({id,title,checked, onDeleteBtn, onChecked}) {\r\n\r\n    const onChangeHandler = (e) => {\r\n        onChecked({id,checked:e.target.checked})\r\n    }\r\n\r\n    const titleClass = classNames(\r\n        'todo___text',\r\n        (checked?'disabled':'enabled')\r\n    )\r\n\r\n    const setDate = (id) => {\r\n        let date = new Date(parseInt(id));\r\n        let formatDate = date.getFullYear() + \"-\" + \r\n                        String(date.getMonth() + 1).padStart(2,'0') + \"-\" + \r\n                        String(date.getDate()).padStart(2,'0') + \" \" +\r\n                        String(date.getHours()).padStart(2,'0') + \":\" +\r\n                        String(date.getMinutes()).padStart(2,'0') + \":\" +\r\n                        String(date.getSeconds()).padStart(2,'0');\r\n\r\n        return formatDate;\r\n    }\r\n    \r\n    return(\r\n        <li id={id} className=\"todo__li\">\r\n            <Checkbox className=\"todo___check\" checked={(typeof checked === \"undefined\"?false:checked)} onChange={onChangeHandler} large={true}/>\r\n                <Link className={titleClass} to={checked?`/#`:`/${id}`}>\r\n                    {title}\r\n                    <div className=\"todo___date\">{setDate(id)}</div>\r\n                </Link>\r\n            <div className=\"btn__area\">\r\n                <Button onClick={onDeleteBtn} fill={true} className=\"del___btn\" icon=\"trash\" intent=\"danger\"/>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch,ownProps){\r\n    return {\r\n        onDeleteBtn: () => dispatch(remove(ownProps.id)),\r\n        onChecked: (obj) => dispatch(check(obj))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(ToDo);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setDraw } from '../store';\r\nimport '../css/Home.scss';\r\n\r\nimport AddBtn from '../components/AddBtn';\r\nimport FormArea from '../components/FormArea';\r\nimport Header from '../components/Header';\r\nimport ToDo from '../components/ToDo';\r\n\r\nimport { Button, Classes, Drawer } from '@blueprintjs/core';\r\n\r\nfunction Home({toDos, drawState, setDrawState}) {\r\n\r\n    const handleClose = () => {setDrawState({isOpen:false})};\r\n    const handleOpen = () => {setDrawState({isOpen:true})};\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Drawer\r\n                icon=\"annotation\"\r\n                onClose={handleClose}\r\n                title=\"Add ToDo\"\r\n                {...drawState}\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <div className={Classes.DIALOG_BODY}>\r\n                        <FormArea closeFunc={handleClose}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </Drawer>\r\n            {toDos.length === 0?\r\n                    <div className=\"empty_page\">\r\n                        <Button onClick={handleOpen} icon=\"plus\" intent=\"success\" text=\"Add frist To-Do\" large=\"true\"/>\r\n                    </div>:\r\n                    <ul className=\"todo_ul\">\r\n                    {\r\n                        toDos.map(toDo => <ToDo key={toDo.id} {...toDo}/>)\r\n                    }\r\n                </ul>\r\n                }\r\n            \r\n            <AddBtn eventProps={handleOpen}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        toDos: state.ToDoList,\r\n        drawState: state.drawState\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setDrawState: options => dispatch(setDraw(options))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FormArea from '../components/FormArea';\r\nimport Header from '../components/Header';\r\n\r\nfunction Detail({toDo}) {\r\n\r\n    return (\r\n            <>\r\n            <Header id={toDo.id}/>\r\n            <div style={{\r\n                padding:\"100px 20px 0px 20px\"\r\n            }}>\r\n                <FormArea toDo={toDo} type=\"update\"/>\r\n            </div>\r\n            </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps({ToDoList},ownProps){\r\n    const {match: {params:{id}}} = ownProps;\r\n    return {toDo: ToDoList.find(toDo => toDo.id === parseInt(id))};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Detail);","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nimport {HashRouter as Router, Route} from 'react-router-dom'\r\nimport Home from '../routes/Home';\r\nimport Detail from '../routes/Detail';\r\n\r\nfunction App() {\r\n  return <Router>\r\n    <Route path=\"/\" exact component={Home}></Route>\r\n    <Route path=\"/:id\" component={Detail}></Route>\r\n  </Router>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nimport './css/index.css';\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\nimport \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <App></App>\r\n    </Provider>\r\n    ,document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}