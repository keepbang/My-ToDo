{"version":3,"sources":["store.js","components/ToDo.js","components/AddBtn.js","components/FormArea.js","routes/Home.js","routes/Detail.js","components/App.js","index.js"],"names":["storageKey","toDos","createSlice","name","initialState","ToDoList","JSON","parse","localStorage","getItem","drawState","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","isOpen","position","Position","BOTTOM","size","undefined","usePortal","reducers","add","payload","stateItem","title","text","id","Date","now","unshift","tmpObj","push","setItem","stringify","arrObj","remove","state","action","filter","obj","toDo","setDraw","actions","configureStore","reducer","connect","dispatch","ownProps","onDeleteBtn","className","to","onClick","fill","icon","intent","AddBtn","eventProps","iconSize","Icon","SIZE_LARGE","Intent","NONE","addToDo","closeFunc","useState","setText","setTitle","onSubmit","e","preventDefault","alert","alwaysRenderInput","INTENT_PRIMARY","maxLength","placeholder","value","onChange","maxLines","minLines","multiline","type","setDrawState","options","handleClose","handleOpen","onClose","Classes","DRAWER_BODY","DIALOG_BODY","length","large","map","key","match","params","find","parseInt","App","path","exact","component","Home","Detail","ReactDom","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.484a8c81.chunk.js","sourcesContent":["import { Position } from \"@blueprintjs/core\";\r\nimport {configureStore, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst storageKey = \"Keepbang.ToDo.Storage\";\r\n\r\nconst initState = () => {\r\n    return JSON.parse(localStorage.getItem(storageKey))?JSON.parse(localStorage.getItem(storageKey)):[];\r\n}\r\n\r\nconst toDos = createSlice({\r\n    name: 'toDoReducer',\r\n    initialState: {\r\n        ToDoList: initState(),\r\n        drawState: {\r\n            autoFocus: true,\r\n            canEscapeKeyClose: true,\r\n            canOutsideClickClose: true,\r\n            enforceFocus: true,\r\n            hasBackdrop: true,\r\n            isOpen: false,\r\n            position: Position.BOTTOM,\r\n            size: undefined,\r\n            usePortal: true,\r\n        }\r\n    },\r\n    reducers: {\r\n        add: ({ToDoList}, {payload}) => {\r\n            let stateItem = {title: payload.title, text: payload.text, id: Date.now()};\r\n            ToDoList.unshift(stateItem);\r\n            let tmpObj = localStorage.getItem(storageKey);\r\n            if(tmpObj === null){\r\n                tmpObj = [];\r\n                tmpObj.push(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(tmpObj));\r\n            }else{\r\n                let arrObj = JSON.parse(tmpObj);\r\n                arrObj.unshift(stateItem);\r\n                localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n            }\r\n        },\r\n        remove: (state, action) => {\r\n            let arrObj = JSON.parse(localStorage.getItem(storageKey));\r\n            arrObj = arrObj.filter(obj => obj.id !== action.payload);\r\n            localStorage.setItem(storageKey,JSON.stringify(arrObj));\r\n\r\n            return {...state,ToDoList : state.ToDoList.filter(toDo => toDo.id !== action.payload)};\r\n        },\r\n        setDraw: (state,action) => {\r\n            return {...state,drawState: {...state.drawState,...action.payload}}\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    add,\r\n    remove,\r\n    setDraw\r\n} = toDos.actions\r\n\r\nexport default configureStore({reducer: toDos.reducer});","import { Button } from '@blueprintjs/core';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { remove } from '../store';\r\nimport '../css/ToDo.scss';\r\n\r\nfunction ToDo({text,id,title, onDeleteBtn}) {\r\n    return(\r\n        <li id={id} className=\"todo__li\">\r\n            <Link to={`/${id}`}>\r\n                <div className=\"todo___text\">{title}</div>\r\n            </Link>\r\n            <div className=\"btn__area\">\r\n                <Button onClick={onDeleteBtn} fill={true} className=\"del___btn\" icon=\"trash\" intent=\"danger\"/>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch,ownProps){\r\n    return {\r\n        onDeleteBtn: () => dispatch(remove(ownProps.id))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(ToDo);","import { Icon, Intent } from '@blueprintjs/core'\r\nimport React from 'react'\r\nimport '../css/AddBtn.scss'\r\n\r\nconst AddBtn = ({eventProps}) => {\r\n    return <>\r\n        <div className=\"add_btn\" onClick={eventProps}>\r\n            <Icon icon=\"add-to-artifact\" iconSize={Icon.SIZE_LARGE} intent={Intent.NONE}/>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default AddBtn;","import { Button, EditableText, H3 } from '@blueprintjs/core';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { add } from '../store';\r\nimport '../css/FormArea.scss';\r\nimport { INTENT_PRIMARY } from '@blueprintjs/core/lib/esm/common/classes';\r\n\r\nconst FormArea = ({addToDo, closeFunc}) => {\r\n\r\n    const [text,setText] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    function onChangeText(value){\r\n        setText(value);\r\n    }\r\n\r\n    function onChangeTitle(value){\r\n        setTitle(value);\r\n    }\r\n\r\n    function onSubmit(e){\r\n        e.preventDefault();\r\n        if(text === \"\"){\r\n            alert(\"아무것도 입력하지 않았습니다.\");\r\n        }else{\r\n            addToDo({title,text});\r\n            setText(\"\");\r\n            closeFunc();\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <form onSubmit={onSubmit} className=\"form_area\">\r\n            <H3>\r\n                <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLength={100}\r\n                    placeholder=\"Edit title...\"\r\n                    value={title}\r\n                    onChange={onChangeTitle}\r\n                />\r\n            </H3>\r\n            <EditableText\r\n                    alwaysRenderInput={true}\r\n                    intent={INTENT_PRIMARY}\r\n                    maxLines={12}\r\n                    minLines={3}\r\n                    multiline={true}\r\n                    placeholder=\"Write ToDo...\"\r\n                    onChange={onChangeText}\r\n                    value={text}\r\n                />\r\n            {/* <TextArea style={{resize:\"none\"}} fill={true} growVertically={true} onChange={onChange} value={text} large={true} placeholder=\"Write ToDo...\"/> */}\r\n            <Button className=\"add__btn\" type=\"submit\" icon=\"add\" intent=\"success\" text=\"ADD\" />\r\n        </form>\r\n    </>\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        addToDo: (obj) => dispatch(add(obj))\r\n    };\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(FormArea);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ToDo from '../components/ToDo';\r\nimport '../css/Home.scss';\r\nimport { setDraw } from '../store';\r\n\r\nimport AddBtn from '../components/AddBtn';\r\nimport FormArea from '../components/FormArea';\r\nimport { Button, Classes, Drawer } from '@blueprintjs/core';\r\n\r\nfunction Home({toDos, drawState, setDrawState}) {\r\n\r\n    const handleClose = () => {setDrawState({isOpen:false})};\r\n    const handleOpen = () => {setDrawState({isOpen:true})};\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"home_title\">ToDo</h2>\r\n            <Drawer\r\n                icon=\"edit\"\r\n                onClose={handleClose}\r\n                title=\"Add ToDo\"\r\n                {...drawState}\r\n            >\r\n                <div className={Classes.DRAWER_BODY}>\r\n                    <div className={Classes.DIALOG_BODY}>\r\n                        <FormArea closeFunc={handleClose}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </Drawer>\r\n            {toDos.length === 0?\r\n                    <div className=\"empty_page\">\r\n                        <Button onClick={handleOpen} icon=\"plus\" intent=\"success\" text=\"Add frist To-Do\" large=\"true\"/>\r\n                    </div>:\r\n                    <ul className=\"todo_ul\">\r\n                    {\r\n                        toDos.map(toDo => <ToDo key={toDo.id} {...toDo}/>)\r\n                    }\r\n                </ul>\r\n                }\r\n            \r\n            <AddBtn eventProps={handleOpen}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        toDos: state.ToDoList,\r\n        drawState: state.drawState\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        setDrawState: options => dispatch(setDraw(options))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Detail({toDo}) {\r\n    return (\r\n            <>\r\n                <h1>\r\n                    title : {toDo?.title}\r\n                </h1>\r\n                <h3>\r\n                    text : {toDo?.text}\r\n                </h3>\r\n                <h3>\r\n                    Create at : {toDo?.id}\r\n                </h3>\r\n            </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps({ToDoList},ownProps){\r\n    const {match: {params:{id}}} = ownProps;\r\n    return {toDo: ToDoList.find(toDo => toDo.id === parseInt(id))};\r\n}\r\n\r\nexport default connect(mapStateToProps)(Detail);","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nimport {HashRouter as Router, Route} from 'react-router-dom'\r\nimport Home from '../routes/Home';\r\nimport Detail from '../routes/Detail';\r\n\r\nfunction App() {\r\n  return <Router>\r\n    <Route path=\"/\" exact component={Home}></Route>\r\n    <Route path=\"/:id\" component={Detail}></Route>\r\n  </Router>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nimport './css/index.css';\r\n\r\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\r\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\r\n\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <App></App>\r\n    </Provider>\r\n    ,document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}